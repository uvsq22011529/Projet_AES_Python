import numpy as np
from Chiffrement import*


def SubWordInverse(tab):
    """Fonction inverse de SubWord, effectue une substitution de chaque index de l'élément du tableau en utilisant la table
    de substitution Sbox"""
    return np.array([format_hex(Sbox.index(int(elem, 16))) for elem in tab])
    
    
def MixColumnsInverse(etat):
    """ Fonction inverse de la fonction Mix Columns """
    etat_change = np.copy(etat)
    for i in range(4):
        un0, un1, un2, un3 = etat[0, i], etat[1, i], etat[2, i], etat[3, i]
        etat_change[0, i] = format_hex(multiplication_by_14[int(un0, 16)]^multiplication_by_11[int(un1, 16)]^multiplication_by_13[int(un2, 16)]^multiplication_by_9[int(un3, 16)])
        etat_change[1, i] = format_hex(multiplication_by_9[int(un0, 16)]^multiplication_by_14[int(un1, 16)]^multiplication_by_11[int(un2, 16)]^multiplication_by_13[int(un3, 16)])
        etat_change[2, i] = format_hex(multiplication_by_13[int(un0, 16)]^multiplication_by_9[int(un1, 16)]^multiplication_by_14[int(un2, 16)]^multiplication_by_11[int(un3, 16)])
        etat_change[3, i] = format_hex(multiplication_by_11[int(un0, 16)]^multiplication_by_13[int(un1, 16)]^multiplication_by_9[int(un2, 16)]^multiplication_by_14[int(un3, 16)])
    return etat_change


def ShiftRowsInverse(etat):
    """ Fonction inverse de ShiftRows, retourne l'état après avoir décale selon une rotation horizontale vers la droite de i positions chaque lignes de l'état """
    etat_change = np.copy(etat)
    for i in range(len(etat)):
        etat_change[i] = np.roll(etat[i], i)
    return etat_change


def subBytesInverse(etat):
    """  Fonction inverse de SubBytes, Retourne l'état après avoir appliqué la fonction SubWord inverse à chaque bits de l'état """
    etat_change =  np.copy(etat)
    for i in range(len(etat_change)):
        etat_change[i] = SubWordInverse(etat[i])
    return etat_change


def printStateInverse(message_chiffre):
    """ Retourne le message chiffré précedemment en bloc d'état de 16 bits en héxadecimal à un message en texte """
    text = ""
    message_chiffre = message_chiffre.reshape(16, order='F')
    for i in message_chiffre:
        text+= chr(int(i, 16))
    return text


def decrypt(message_crypte, key):
    """ Fonction qui retourne le message clair à partir d'un chiffré et de sa clé (chiffrement inverse) """
    key = keyExpansion(key)
    message_crypte = AddRoundKey(message_crypte, key[:, -4:])
    message_crypte = ShiftRowsInverse(message_crypte)
    message_crypte = subBytesInverse(message_crypte)
    for i in range(9, 0, -1):
        message_crypte = AddRoundKey(message_crypte, key[:, i*4:i*4+4])
        message_crypte = MixColumnsInverse(message_crypte)
        message_crypte = ShiftRowsInverse(message_crypte)
        message_crypte = subBytesInverse(message_crypte)
    message_crypte = AddRoundKey(message_crypte, key[:, :4])
    return printStateInverse(message_crypte)
